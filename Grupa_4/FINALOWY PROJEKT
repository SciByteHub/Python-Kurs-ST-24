import tkinter as tk
from PIL import Image, ImageTk, ImageSequence
from tkinter import ttk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import pandas as pd
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


def login():
    name = str(entry_field1.get())
    print("Witaj!" + name)
    close_button = tk.Button(root, text="Zamknij", command=lambda:[root.destroy(),powrot_menu()])

def powrot_menu(df):
    global drugi
    drugi = tk.Tk()
    drugi.geometry("500x800")
    drugi.title("Monitorowanie budżetu")
    drugi.configure(bg="misty rose")

    frame1 = tk.Frame(drugi,bg="misty rose")
    #frame1.pack(pady=20, fill='both', expand=True)
    frame1.pack()
    
    title = tk.Label(frame1, text="Witaj ponownie.", font=("Times New Roman", 20), bg="misty rose", pady=30)
    title.grid(column=0, row=0, columnspan=2)

    tablelabel = tk.Label(frame1, text="Transakcje z ostatnich dni.",font=("Times New Roman", 15), bg="misty rose", pady=30)
    tablelabel.grid(column=0, row=1, columnspan=2)
    data2 = df.copy()
    df = df.sort_values(by='Data', ascending=[False])
    tree = ttk.Treeview(frame1)
    tree["columns"] = list(df.columns)
    for col in df.columns:
        tree.column(col, anchor="w")
        tree.heading(col, text=col, anchor='w')
    for index, row in df.iterrows():
        tree.insert("", 0, text=index, values=list(row))
    tree.grid(column=0,row=3,  columnspan=2, padx=10, pady=10)

    # wykres kolowy
    # col 0 row4
    wykres_label = tk.Label(frame1, text="Oto Twoje wydatki na poszczególne kategorie.", font=("Times New Roman", 15), bg="misty rose", pady=30)
    wykres_label.grid(column=0, row=4, columnspan=2)
    # col 0 row5
    data2['Data'] = pd.to_datetime(data2['Data'])
    c1 = data2[data2["Typ Transakcji"]=="Wydatek"]
    do_liniowego = c1.groupby(['Kategoria', 'Data']).sum()['Kwota'].reset_index()
    do_liniowego.sort_values(by=['Data'], inplace=True)
    do_kolowego = do_liniowego.groupby('Kategoria')['Kwota'].sum()
    #plt.figure(figsize=(8, 8))
    #plt.pie(do_kolowego, labels=do_kolowego.index, autopct='%1.1f%%')
    #plt.title('Wydatki na poszczególne kategorie w całym roku')
    #plt.savefig('Wydatki_kolowy_calyrok.png')
    fig,ax=plt.subplots()
    ax.pie(do_kolowego, labels=do_kolowego.index, autopct='%1.1f%%')
    canvas = FigureCanvasTkAgg(fig, master=frame1)
    canvas.draw()
    canvas.get_tk_widget().grid(column=0,row=5,  columnspan=2, padx=10, pady=10)


    dajwykres1 = tk.Button(frame1, text = "Zobacz sumę wydatków na rok", command=lambda:[drugi.destroy(),wykres_rok(df)])
    dajwykres1.grid(column=2,row=5)

    dajwykres2 = tk.Button(frame1, text = "Zobacz zmiany wydatków w czasie", command=lambda:[drugi.destroy(),wykres_kategorie(df)])
    dajwykres2.grid(column=2,row=6)

    dajwykres3 = tk.Button(frame1, text = "Poszczególne kategorie w każdym miesiącu", command=lambda:[drugi.destroy(),wykres_kategorie_mc(df)])
    dajwykres3.grid(column=3,row=5)

    dajwykres4 = tk.Button(frame1, text = "Procentowy rozkład wydatków na kategorie", command=lambda:[drugi.destroy(),wykres_kategorie_proc(df)])
    dajwykres4.grid(column=3,row=6)


    close_button = tk.Button(frame1, text="Zamknij", command=drugi.destroy)
    close_button.grid(column=1, row=5)
    drugi.mainloop()


def wykres_rok(df):
    w1 = tk.Tk()
    w1.geometry("500x800")
    w1.title("Suma wydatków na rok na kategorie")
    w1.configure(bg="misty rose")
    f1 = tk.Frame(w1,bg="misty rose")
    f1.pack()

    c1 = df[df["Typ Transakcji"]=="Wydatek"]
    #sumowanie wydatków i wpływów w poszczególnych kategoriach
    df['Data'] = pd.to_datetime(df['Data'])
    suma_wydatkow_kategoria = c1.groupby('Kategoria').sum()['Kwota'].reset_index()

    bar_colors = ['tab:red', 'tab:blue', 'tab:green', 'tab:orange']
    fig,ax=plt.subplots()
    ax.bar(suma_wydatkow_kategoria['Kategoria'], suma_wydatkow_kategoria['Kwota'], color=bar_colors)
    ax.set_xlabel('Kategoria')
    ax.set_ylabel('Kwota')
    ax.set_title('Suma wydatków w poszczegolnych kategoriach ')
    canvas = FigureCanvasTkAgg(fig, master=f1)
    canvas.draw()
    canvas.get_tk_widget().grid(column=0,row=0,  columnspan=2, padx=10, pady=10)

    close_button = tk.Button(w1, text="Powrót do menu", command=lambda:[w1.destroy(),powrot_menu(df)])
    close_button.pack(pady=10)
    w1.mainloop()

def wykres_kategorie(df):
    w2 = tk.Tk()
    w2.geometry("500x800")
    w2.title("Zmiany wydatków w czasie")
    w2.configure(bg="misty rose")
    f2 = tk.Frame(w2,bg="misty rose")
    f2.pack()

    df['Data'] = pd.to_datetime(df['Data'])
    c1 = df[df["Typ Transakcji"]=="Wydatek"].copy()

    do_liniowego = c1.groupby(['Kategoria', 'Data']).sum()['Kwota'].reset_index()
    do_liniowego.sort_values(by=['Data'], inplace=True)
    do_liniowego['Sumaryczny'] = do_liniowego['Kwota'].cumsum()

    fig,ax=plt.subplots()
    ax.plot(do_liniowego.sort_values(by='Data')['Data'], do_liniowego.sort_values(by='Data')['Sumaryczny'], color="red", linewidth=2.5)
    
    for kategoria in do_liniowego['Kategoria'].unique():
        dane_kategorii = do_liniowego[do_liniowego['Kategoria'] == kategoria]
        ax.plot(dane_kategorii['Data'], dane_kategorii['Kwota'], label=kategoria, marker='o')
        ax.plot(dane_kategorii['Data'], dane_kategorii['Kwota'], label='_nolegend_')

    ax.set_xlabel('Data')
    ax.set_ylabel('Kwota')
    ax.set_title('Zmiana wydatków przeznaczonych na poszczególne kategorie w czasie')
    ax.legend()
    canvas = FigureCanvasTkAgg(fig, master=f2)
    canvas.draw()
    canvas.get_tk_widget().grid(column=0,row=0,  columnspan=2, padx=10, pady=10)

    close_button = tk.Button(w2, text="Powrót do menu", command=lambda:[w2.destroy(),powrot_menu(df)])
    close_button.pack(pady=10)
    w2.mainloop()

def wykres_kategorie_mc(df):
    w3 = tk.Tk()
    w3.geometry("500x800")
    w3.title("Zmiany wydatków w czasie")
    w3.configure(bg="misty rose")
    f3 = tk.Frame(w3,bg="misty rose")
    f3.pack()

    df['Data'] = pd.to_datetime(df['Data'])
    c1 = df[df["Typ Transakcji"]=="Wydatek"]
    do_liniowego = c1.groupby(['Kategoria', 'Data']).sum()['Kwota'].reset_index()
    do_liniowego.sort_values(by=['Data'], inplace=True)
    do_liniowego['Data'] = pd.to_datetime(do_liniowego['Data'])
    wydatki_miesiac_kategoria = do_liniowego.groupby([do_liniowego['Data'].dt.strftime('%Y-%m'), 'Kategoria'])['Kwota'].sum().unstack()

    fig, ax = plt.subplots(figsize=(12, 8))
    wydatki_miesiac_kategoria.plot(kind='bar', ax=ax)

    ax.set_title('Wydatki w poszczególnych kategoriach w każdym miesiącu')
    ax.set_xlabel('Miesiąc')
    ax.set_ylabel('Kwota')

    canvas = FigureCanvasTkAgg(fig, master=f3)
    canvas.draw()
    canvas.get_tk_widget().grid(column=0,row=0,  columnspan=2, padx=10, pady=10)

    close_button = tk.Button(w3, text="Powrót do menu", command=lambda:[w3.destroy(),powrot_menu(df)])
    close_button.pack(pady=10)
    w3.mainloop()


def wykres_kategorie_proc(df):
    w4 = tk.Tk()
    w4.geometry("500x800")
    w4.title("Zmiany wydatków w czasie")
    w4.configure(bg="misty rose")
    f4 = tk.Frame(w4,bg="misty rose")
    f4.pack()

    close_button = tk.Button(w4, text="Powrót do menu", command=lambda:[w4.destroy(),powrot_menu(df)])
    close_button.pack(pady=10)

    w4.mainloop()






def main():
    global root
    global frame
    global entry_field1
    global entry_field2

    root = tk.Tk()
    root.geometry("500x400")
    root.title("Monitorowanie budżetu")
    root.configure(bg="misty rose")

    data = pd.read_csv('testowe_transakcje1.csv')
    df = pd.DataFrame(data)

    kategorie = {
            'dom': ['rachunki','podatki','czynsz','remont','naprawy'],
            'transport': ['paliwo','bilet','taxi','ubezpieczenie','mechanik','eksploatacja'],
            'rozrywka': ['kino','teatr','muzeum','restauracja','basen','wakacje','subskrypcja','hobby'],
            'zdrowie': ['lekarstwa','lekarz','badanie'],
            'usługi': ['fryzjer','kosmetyczka','telefon','internet'],
            'jedzenie': ['jedzenie', 'przekąski', 'dostawa'],
            'wpłata': ['pensja','świadczenie', 'stypendium', 'gotówka']
            }

    #komenda która przypisuje wydatki do odpowiedniej kategorii na podstawie jego opisu
    def przypisz_kategorie(opis_wydatku, kategorie):
        for kategoria, slowo_klucz in kategorie.items():
            if any(slowo in opis_wydatku.lower() for slowo in slowo_klucz):
                return kategoria
        return 'inne'

    def czytaj_i_sortuj_csv(plik):
        df = pd.read_csv(plik, encoding='utf-8')
        df['Kategoria'] = df['Opis'].apply(lambda x: przypisz_kategorie(x, kategorie))
        print(df[['Opis','Kategoria']])
        df.to_csv('posortowane_transakcje.csv', index=False)    #nowy plik z dodanymi kategoriami
        return df

    #def czytaj_i_sortuj_csv(plik):
     #   df = pd.read_csv(plik, encoding='utf-8')
     #   df['Data'] = pd.to_datetime(df['Data'])
     #   df['Kategoria'] = df['Opis'].apply(lambda x: przypisz_kategorie(x, kategorie))
     #   return df

    # Funkcja do obliczenia wydatków w danym miesiącu dla danej kategorii
    def calculate_monthly_expenses(df, year, month, category):
        monthly_expenses = df[(df['Data'].dt.year == year) & (df['Data'].dt.month == month) & (df['Typ Transakcji'] == 'Wydatek')]
        if category != 'Wszystkie':
            monthly_expenses = monthly_expenses[monthly_expenses['Kategoria'] == category]
        total_expenses = monthly_expenses['Kwota'].sum()
        return total_expenses

    # Funkcja do sprawdzenia, czy wydatki przekroczyły limit dla każdego miesiąca
    def check_budget_limit_for_year(file_path, year, limit, category):
        df = czytaj_i_sortuj_csv(file_path)
        for month in range(1, 13):
            total_expenses = calculate_monthly_expenses(df, year, month, category)
            if total_expenses > limit:
                print(f"Alert: Wydatki w miesiącu {month}/{year} dla kategorii '{category}' przekroczyły zadany limit! Suma wydatków: {total_expenses} zł")
            else:
                print(f"Wydatki w miesiącu {month}/{year} dla kategorii '{category}' są w ramach limitu. Suma wydatków: {total_expenses} zł")

    # Funkcja do pobrania unikalnych kategorii z pliku CSV
    def get_unique_categories(file_path):
        df = czytaj_i_sortuj_csv(file_path)
        categories = df['Kategoria'].unique().tolist()
        categories.append('Wszystkie')
        return categories

    
    # Funkcja pytająca użytkownika o limit i kategorię
    def get_user_input(file_path):
        year = int(input("Podaj rok (YYYY): "))
        limit = float(input("Podaj limit wydatków (zł): "))
        categories = get_unique_categories(file_path)
        print("Dostępne kategorie: ")
        for category in categories:
            print(f"- {category}")

        category = input("Podaj kategorię: ")
        while category not in categories:
            print("Błędna kategoria. Spróbuj ponownie.")
            category = input("Podaj kategorię: ")

        return year, limit, category

    # Ścieżka do pliku CSV (dostosuj zgodnie z lokalizacją pliku)
    file_path = 'testowe_transakcje.csv'  # Przykładowa ścieżka, dostosuj zgodnie z lokalizacją pliku

    # Pobranie danych od użytkownika
    #year, limit, category = get_user_input(file_path)

    # Sprawdzenie wydatków dla każdego miesiąca w roku
    #check_budget_limit_for_year(file_path, year, limit, category)

    plik = r'testowe_transakcje1.csv'    #plik czytany
    df = czytaj_i_sortuj_csv(plik)


    frame = tk.Frame(bg="misty rose")
    title = tk.Label(frame, text="Witaj! Oto twój tracker finansów.", font=("Times New Roman", 20), bg="misty rose", pady=30)
    title.grid(column=0, row=0, columnspan=2)
    title2 = tk.Label(frame, text="Zaloguj się aby śledzić swoje wydatki", font=("Times New Roman", 25), bg="misty rose", pady=20)
    title2.grid(column=0, row=1, columnspan=2)
    label1 = tk.Label(frame, text="Twój login:", bg="misty rose", font=("Times New Roman", 10), pady=10)
    label1.grid(column=0, row=2)
    entry_field1 = tk.Entry(frame)
    entry_field1.grid(column=1, row=2)
    label2 = tk.Label(frame, text="Podaj hasło:", bg="misty rose", font=("Times New Roman", 10), pady=10)
    label2.grid(column=0, row=3)

    entry_field2 = tk.Entry(frame, show="*")
    entry_field2.grid(column=1, row=3)
    button1 = tk.Button(frame, text="Zaloguj się", bg="hot pink", font=("Times New Roman", 10), command=lambda:[root.destroy(), powrot_menu(df)])
    button1.grid(column=0, row=4, columnspan=2)
    frame.pack()
    root.mainloop()




if __name__ == '__main__':
    main()
